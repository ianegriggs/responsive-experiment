function CoreBookmark(options) {
	"use strict";
	this.d = document;
	this.w = window;
	this.options = this.extend({
		maxWait			: 4e3,
		key 			: (new Date).getTime(),
		check			: {"iframe":"src","embed":'src',"video":'src',"img":'src','*':'style'},
		style			: this.css(),
		base_domain 	: '<?php echo $this->getRequest()->getBaseUrl();?>',
		publicate_url 	: '<?php echo preg_replace('~https?://~i', '', $this->url(array('controller'=>'create-pin'),'bookmarklet'));?>',
		logo 			: '<?php if(\Base\Config::get('site_logo')) { ?>uploads/data/<?php echo \Base\Config::get('site_logo');?><?php } else { ?>assets/images/logo.png<?php } ?>',
		thumbCellSize	: 236,
		MinImageSize	: <?php echo $this->config_image_minimum_size;?>,
		cellMargin		: 14,
		thumbDimHeight	: 30,
		msg				: {
							cancelTitle : '<?php echo $this->escape($this->_('Cancel'));?>',
							small		: ' <?php echo $this->escape($this->_('(small)'));?>'
					  	},
		pop				: "status=no,resizable=yes,scrollbars=yes,personalbar=no,directories=no,location=no,toolbar=no,menubar=no,width=632,height=270,left=0,top=0",
		lookup			: {}
	}, options || {});
	this.init();
	this.self = this;
 }
 
 CoreBookmark.prototype = {
 	images: [],
 	callback: [],
 	nextCallback: 0,
 	callbacksHaveReturned: 0,
	init : function() {
		this.getImages();
		this.body = this.d.getElementsByTagName("BODY")[0];
		this.head = this.d.getElementsByTagName("HEAD")[0];
		this.renderedThumb = {};
		this.structure = {};
		this.headAddCss();
		this.generateStructure();
		self = this;
		setTimeout(function() {
			self.ponder();
			//self.generateGrid();
		},100);
	},
	getParentByTagName: function(obj, tag) {
		var obj_parent = obj.parentNode;
		if (!obj_parent) return false;
		if (obj_parent.tagName && obj_parent.tagName.toLowerCase() == tag) { 
			return obj_parent;
		} else { 
			return this.getParentByTagName(obj_parent, tag);
		}
	},
	getImages: function() {
		this.nextCallback;
		//this.images = [];
		for( element in this.options.check) {
			f = this.d.getElementsByTagName(element);
			for (a = 0; a < f.length; a++) {
				image_link = this.get(f[a],this.options.check[element]);
				if(this.options.check[element] == 'style') {
					if(image_link.backgroundImage) {
						parsedBackground = /url\(([\'\"\s])?([^\)]*)([\'\"\s])?\)/i.exec(image_link.backgroundImage);
						if(parsedBackground) {
							image_link = parsedBackground[2];
						}
					}
				}
				
				if(image_link && typeof image_link == 'string') {
					ext = image_link.split(".").pop().split("?")[0].split("#")[0];
					if (ext === "gif" || ext === "jpg" || ext === "jpeg" || ext === "png") { 
						link = this.getParentByTagName(f[a],'a');
						url = link && link.href || window.location.href;
						if(url.indexOf('javascript:') > -1) { url = window.location.href; }
						k = this.grovel(image_link, element);
						if(f[a].offsetHeight >= this.options.MinImageSize && f[a].offsetWidth >= this.options.MinImageSize) {
							if(k && this.options.lookup[k] && ("function" === typeof this.options.lookup[k][element].patch && (this.options.lookup[k][element].att||this.options.check[element]) && this.get(f[a], (this.options.lookup[k][element].att||this.options.check[element])) && (l = this.options.lookup[k][element].patch(this.get(f[a], (this.options.lookup[k][element].att||this.options.check[element])))))) {
								var img = new Image();
								img.src = l;
								img.patchedSource = l;
								this.getImageSize(img);
								this.images.push({url:url,src:image_link,title:(link && link.title || f[a].title || f[a].alt || this.d.title),width:f[a].offsetWidth,height:f[a].offsetHeight,extended:{img:img}});
							} else {
								this.images.push({url:url,src:image_link,title:(link && link.title || f[a].title || f[a].alt || this.d.title),width:f[a].offsetWidth,height:f[a].offsetHeight,extended:false});
							}
						}
					}
				}
				
			}
		}
		return this.images;
	},
	getImageSize: function (a) {
		a.loaded = !1;
		var b = new Image;
		if (b.onload = function () {
			a.loaded = !0, a.height = this.height, a.width = this.width
		}, b.src = a.src, a.patchedSource) {
			var c = new Image;
			c.onload = function () {
				a.loaded = !0, a.height = this.height, a.width = this.width, a.src = this.src
			}, c.src = a.patchedSource
		}
	},
	grovel: function (a, b) {
		var c, e, f, g = null;
		for (c in this.options.lookup) {
			if (this.options.lookup[c].hasOwnProperty && "object" === typeof this.options.lookup[c][b] && "object" === typeof this.options.lookup[c][b].seek) {
				for (e = 0, f = this.options.lookup[c][b].seek.length; e < f; e += 1) {
					if (a.match(this.options.lookup[c][b].seek[e])) {
						g = c;
						break
					}
				}
			}
		}
		return g;
	},
	scaleThumb: function (a, b) {
		if( b > this.options.thumbCellSize ) {
			return {
				width: this.options.thumbCellSize,
				height: this.options.thumbCellSize * (a / b)
			}
		}
		return {
			width: b,
			height: a
		}
	},
	kill: function (a) {
		"string" === typeof a && (a = d.d.getElementById(a)), a && a.parentNode && a.parentNode.removeChild(a)
	},
	call: function (a, b) {
		var c, e, f = "?";
		c = this.nextCallback, this.nextCallback = this.nextCallback + 1, e = this.options.key + ".f.callback[" + c + "]", this.callback[c] = function (a) {
                        b(a, c), d.f.kill(e)
                    }, a.match(/\?/) && (f = "&"), this.body.appendChild(d.f.make({
                        SCRIPT: {
                            id: e,
                            type: "text/javascript",
                            charset: "utf-8",
                            src: a + f + "callback=" + e
                        }
                    }));
                },
	ponder: function () {
		var a, b, c, self = this;
		this.nextCallback ? (a = (new Date).getTime(), b = function () {
			self.nextCallback > self.callbacksHaveReturned ? (c = (new Date).getTime(), c < a + self.maxWait ? setTimeout(function () {
				b()
			}, 100) : (self.timedOut = !0, self.generateGrid())) : self.generateGrid()
		}, b()) : this.generateGrid();
	},
	thumb: function (a) {
		var b, c, e, f, g, h, i, j = this.make({
				SPAN: {
					className: 'core_' + this.options.key + '_thumb'
				}
			});
			
		if (a.extended && a.extended.img && a.extended.img.loaded && a.extended.img.src ? (b = a.extended.img.src, c = a.extended.img.height, e = a.extended.img.width) : (b = a.src, c = a.height, e = a.width), !this.renderedThumb[b]) {
			this.renderedThumb[b] = !0, g = this.scaleThumb(c, e), f = this.make({
				IMG: {
					src: b,
					nopin: !0,
					height: "" + g.height,
					width: "" + g.width,
					style: "height:" + g.height + "px;width:" + g.width + "px;"
				}
			}), j.appendChild(f);
			var k = this.getSelection() || a.title || this.d.title;
			k = k.substring(0, 140), 140 === k.length && (k += "..."), h = this.make({
				DIV: {
					className: 'core_' + this.options.key + "_info"
				}
			});
			var l = this.make({
				SPAN: {
					innerHTML: k
				}
			});
			l.style.display = "block", l.contentEditable = !0, h.appendChild(l);
			var m = e + " x " + c;
			
			(e < this.options.thumbCellSize || c < this.options.thumbCellSize) && (m += this.options.msg.small);
			var n = this.make({
				SMALL: {
					innerHTML: m
				}
			});
			j.appendChild(n);
			var self = this;
		
			return h.style.width = this.options.thumbCellSize - this.options.thumbCellMargin + "px", j.appendChild(h), g.height = g.height, i = this.make({
				SPAN: {
					className: 'core_' + this.options.key + "_pin",
					"data-pin-url": a.url,
					"data-pin-media": b
				}
			}), i.style.height = g.height + "px", a.multimedia === !0 && this.set(i, "data-pin-multimedia", !0), j.appendChild(i),this.eventListen(i, 'click', function(){ self.publicate(this);}), j.scale = g, j;
		}
	},
	publicate : function(el) {
		var purl = this.options.publicate_url;
		purl += purl.indexOf('?') > -1 ? '&' : '?';
		var b = purl,
			c = false,//d.f.getData(a, "multimedia"),
			e = this.get(el,'data-pin-media'),
			f = this.get(el,'data-pin-url') || this.d.URL,
			g = el.parentNode.getElementsByTagName("DIV")[0].getElementsByTagName("SPAN")[0],
			h = "";
		g && (h = g.textContent || g.innerText || "", h = h.replace(/^\s+|\s+$/g, "")), b = b + "media=" + encodeURIComponent(e), b = b + "&url=" + encodeURIComponent(f), b = b + "&description=" + encodeURIComponent(h), c && (b = b + "&is_video=" + c), this.isIOS() ? this.w.location = "http://" + b : this.w.open("http://" + b, "pin" + (new Date).getTime(), this.options.pop), this.close()
	},
	isIOS: function() {
		return navigator.userAgent.match(/iP/) !== null
	},
	generateStructure: function() {
		//bg element
		this.structure.background = this.make({
			DIV: {
				id: 'core_' + this.options.key + '_background'
			}
		});
		this.body.appendChild(this.structure.background);
		//holder element
		this.structure.holder = this.make({
			DIV: {
				id: 'core_' + this.options.key + '_holder'
			}
		});
		this.body.appendChild(this.structure.holder);
		//header
		this.structure.header = this.make({
			DIV: {
				id: 'core_' + this.options.key + '_header'
			}
		});
		this.structure.holder.appendChild(this.structure.header);
		//box holder
		this.structure.iframe = this.make({
			DIV: {
				id: 'core_' + this.options.key + '_iframe'
			}
		});
		this.structure.holder.appendChild(this.structure.iframe);
		//logo
		this.structure.logo = this.make({
			IMG: {
				id: 'core_' + this.options.key + '_logo',
				src: this.options.base_domain + this.options.logo
			}
		});
		this.structure.header.appendChild(this.structure.logo);
		//close buton
		this.structure.close_button = this.make({
			A: {
				id: 'core_' + this.options.key + '_close',
				innerHTML: this.options.msg.cancelTitle
			}
		});
		var self = this;
		this.eventListen(this.structure.close_button, 'click', function(){
			self.close();
		});
		this.structure.header.appendChild(this.structure.close_button);
		
	},
	close: function(){
		this.kill(this.structure.background);
		this.kill(this.structure.holder);
		CoreBookmarkInstance = null;
	},
	headAddCss: function() {
		var css = '';
		for(selector in this.options.style) {
			css += selector.replace(/\{core_key\}/g, this.options.key);
			temp = [];
			for(property in this.options.style[selector]) {
				if(typeof this.options.style[selector][property] == 'string') {
					temp.push(property + ':' + (this.options.style[selector][property]).replace(/\{core_domain\}/g, this.options.base_domain) + ';');
				} else {
					temp.push(property + ':' + this.options.style[selector][property] + ';');
				}
			}
			css += "{" + temp.join('') + "}\n";
		}
		style = this.make({
			STYLE: {
				innerHTML: css
			}
		});
		this.head.appendChild(style);
	},
	extend : function () {
		var args = Array.prototype.slice.call(arguments),argl = args.length,arg,retObj = {},k = '',argil = 0,j = 0,i = 0,ct = 0,toStr = Object.prototype.toString,retArr = true;

		for (i = 0; i < argl; i++) {
			if (toStr.call(args[i]) !== '[object Array]') {
				retArr = false;
				break;
			}
		}

		if (retArr) {
			retArr = [];
			for (i = 0; i < argl; i++) {
				retArr = retArr.concat(args[i]);
			}
			return retArr;
		}

		for (i = 0, ct = 0; i < argl; i++) {
			arg = args[i];
			if (toStr.call(arg) === '[object Array]') {
				for (j = 0, argil = arg.length; j < argil; j++) {
					retObj[ct++] = arg[j];
				}
			}
			else {
				for (k in arg) {
					if (arg.hasOwnProperty(k)) {
						if (parseInt(k, 10) + '' === k) {
							retObj[ct++] = arg[k];
						} else {
							retObj[k] = arg[k];
						}
					}
				}
			}
		}
		return retObj;
	},
	kill: function(b) {
		b.parentNode && b.parentNode.removeChild(b);
	},
	get: function(b, c) {
		var e = null;
		return e = b[c] || b.getAttribute(c);
	},
	set: function (a, b, c) {
		"string" === typeof a[b] ? a[b] = c : a.setAttribute(b, c)
	},
	make: function (a) {
		var b, c, e = !1;
		for (b in a)
			if (a[b].hasOwnProperty) {
				e = this.d.createElement(b);
				for (c in a[b]) a[b][c].hasOwnProperty && "string" === typeof a[b][c] && this.set(e, c, a[b][c]);
				break
			}
		return e
	},
	eventListen: function(b, c, e) {
		if (typeof this.w.addEventListener !== "undefined") { b.addEventListener(c, e, false); }
		else { typeof this.w.attachEvent !== "undefined" && b.attachEvent("on" + c, e); }
	},
	getSelection: function() {
		return ("" + (this.w.getSelection ? this.w.getSelection() : this.d.getSelection ? this.d.getSelection() : this.d.selection.createRange().text)).replace(/(^\s+|\s+$)/g, "")
	},
	generateGrid: function () {
		var a, b;
		var images = this.images,//this.getImages(),
			c = 0,
			e = [],
			f = Math.floor(this.structure.iframe.offsetWidth / (this.options.thumbCellSize + this.options.cellMargin)); 
		if(images.length < 1) {
			alert("<?php echo $this->_("Sorry, couldn't find any pinnable things on this page.");?>");
			return;
		}
		for (this.structure.iframe.style.width = f * (this.options.thumbCellSize + this.options.cellMargin)  + "px", a = 0, b = images.length; a < b; a += 1) {
			var g = this.thumb(images[a]);
			if (g) {
				e[c] || (e[c] = 0), g.style.top = e[c] + "px", g.style.left = c * (this.options.thumbCellSize + this.options.cellMargin) + "px", g.style.width = this.options.thumbCellSize + "px", this.structure.iframe.appendChild(g);
				var h = g.getElementsByTagName("DIV")[0],
					i = 0;
				h && (i = h.offsetHeight), i += this.options.thumbDimHeight, g.style.height = g.scale.height + i + "px", g.style.position = 'absolute';
				var j = g.getElementsByTagName("SMALL")[0];
				j.style.bottom = i - this.options.thumbDimHeight + "px", e[c] = Math.ceil(e[c] + g.scale.height + this.options.cellMargin + i), c = (c + 1) % f, max_h = Math.max.apply(Math, e), this.structure.iframe.style.height = max_h + 'px'
			}
		}
	},
	css : function(){
		return {
			'body' : {'overflow-y' : 'hidden'},
			'#core_{core_key}_background' : {'position':'fixed','z-index':8675309,'top':0,'right':0,'bottom':0,'left':0,'background-color':'#f2f2f2','opacity':0.95},
			'#core_{core_key}_holder' : {'position':'fixed','z-index':8675309,'top':0,'right':0,'bottom':0,'left':0,'background':'transparent', 'overflow-y': 'auto'},
			'#core_{core_key}_iframe' : {'position':'relative','background':'transparent','z-index':8675308, 'margin':'60px auto 0'},
			'#core_{core_key}_header' : {'text-align':'center','position':'fixed','height':'45px','top':0,'left':0,'z-index':8675310,'border-bottom':'1px solid #aaa','background':'#fbf7f7','display':'block','width':'100%','box-shadow':'0 1px 2px #aaa','-webkit-box-shadow':'0 1px 2px #aaa','-moz-box-shadow':'0 1px 2px #aaa'},
			'#core_{core_key}_logo'	: {'display':'inline-block', 'margin-top':'7px'},
			'#core_{core_key}_close' : {'display':'inline','cursor':'pointer','color':'#524D4D','text-shadow':'0 1px #fff','float':'right','line-height':'45px','font-size':'14px','font-weight':'bold','text-align':'center','border-left':'1px solid #aaa', 'position':'absolute', 'right':0,'top':0, 'padding': '0 20px'},
			'.core_{core_key}_thumb' : {'display': 'block', 'position':'absolute', 'width':'200px','background':'#bbbbbb','border-radius':'3px','box-shadow':'0 0 2px #555','-moz-box-shadow':'0 0 2px #555','-webkit-box-shadow':'0 0 2px #555','overflow':'hidden'},
			'.core_{core_key}_thumb img' : {'margin':'auto','display':'inherit'},
			'.core_{core_key}_thumb .core_{core_key}_pin': {'cursor':'pointer','position':'absolute','top':0,'right':0,'bottom':0,'left':0,'-moz-transition-property':'background-color','-moz-transition-duration':'0.25s','-webkit-transition-property':'background-color','-webkit-transition-duration':'0.25s','transition-property':'background-color','transition-duration':'0.25s',"background-position":"50% 50%","background-repeat":"no-repeat"},
			'.core_{core_key}_thumb:hover .core_{core_key}_pin': {'background-color':'rgba(0, 0, 0, .25)','background-image': 'url({core_domain}/assets/images/button.png)'},
			'.core_{core_key}_thumb small' : {'position':'absolute','right':0,'left':0,'width':'100%','height':'30px','line-height':'30px','text-align':'center','font-size':'10px','background':'#ffffff','color':'#000000','border-top':'1px solid #eeeeee'},
			'.core_{core_key}_thumb .core_{core_key}_info' : {'position':'absolute','border-top':'1px solid #eeeeee','left':0,'right':0,'bottom':0,'width':'100%','color':'#333333','padding':'14px 0 14px 0','line-height':'17px','font-size':'13px','font-style':'normal','font-weight':'normal','text-align':'left','overflow':'hidden','background-color':'#f6f6f6',"background-position":"215px 15px","background-repeat":"no-repeat"},
			'.core_{core_key}_thumb:hover .core_{core_key}_info': {'background-color':'#ffffff','background-image': 'url({core_domain}/assets/images/pencil.png)'},
			'.core_{core_key}_thumb .core_{core_key}_info span' : {'display': 'block','margin':'0 18px 0 14px'}
		}
	}
};
 
if(!CoreBookmarkInstance) {
	var CoreBookmarkInstance = new CoreBookmark({
		lookup : {
	        imdb: {
	            img: {
	                seek: [/^https?:\/\/(.*?)\.media-imdb\.com\/images\/(.*)@@/],
	                patch: function (a) {
	                    return a.replace(/@@(.*)/, "@@._V1_SX800.jpg")
	                }
	            }
	        },
	        pinterest: {
	            img: {
	                seek: [/^https?:\/\/(.*?)\.pinimg\.com\/236x\//],
	                patch: function (a) {
	                    return a.replace(/\/236x\//, "/736x/")
	                }
	            }
	        },
	        etsy: {
	            img: {
	                seek: [/^https?:\/\/.*?\.etsystatic\.com\//],
	                patch: function (a) {
	                    return a.replace(/il_(.*?)\./, "il_570xN.")
	                }
	            }
	        },
	        tumblr: {
	            img: {
	                seek: [/^https?:\/\/.*?\.media\.tumblr\.com\//],
	                patch: function (a) {
	                    return a.replace(/_(\d+)\.jpg$/, "_1280.jpg")
	                }
	            }
	        },
	        vimeo: {
	            iframe: {
	                seek: [/^http?s:\/\/vimeo\.com\/(\d+)/, /^http:\/\/player\.vimeo\.com\/video\/(\d+)/],
	                patch: function (a) {
	                    var b = null,
	                        c = a.split("#")[0].split("?")[0].split("/").pop();
	                    return c > 1e3 && (b = "http://vimeo.com/" + c), b
	                },
	                att: "src"
	            }
	        },
	        youtube: {
	            video: {
	                seek: [/^https?:\/\/(.*?\.|)youtube\.com\/videoplayback/],
	                att: "data-youtube-id",
	                patch: function (a) {
	                    var b = null;
	                    return a && (b = "http://www.youtube.com/embed/" + a), b
	                }
	            },
	            iframe: {
	                seek: [/^https?:\/\/(.*?\.|)youtube\.com\/embed\//],
	                act: "lookup",
	                via: "link"
	            },
	            embed: {
	                seek: [/^http:\/\/s\.ytimg\.com\/yt\//],
	                patch: function (a) {
	                    var b = null,
	                        c = a.split("video_id=");
	                    return c[1] && (b = c[1].split("&")[0], b = "http://www.youtube.com/embed/" + b), b
	                },
	                att: "flashvars"
	            },
	            img: {
	                seek: [/^https?:\/\/(.*?\.|)ytimg\.com\/(vi|li)\//, /img.youtube.com\/vi\//],
	                patch: function(a) {
	                	return a.replace('/default.jpg', "/0.jpg")
	                }
	            }
	        }
	        
		}
	});
}